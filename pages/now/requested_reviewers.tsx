/*
 * Copyright 2022 Korandoru Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import useSWR from 'swr'
import {RequestedReviewerData} from "../../interfaces";
import {fetcher} from "../../libs/fetcher";
import Head from "next/head";
import Footer from '../../components/footer';
import Loading from '../../components/loading';
import EChartsReact from "echarts-for-react";

export default function RequestedReviewers() {
    const {data} = useSWR<RequestedReviewerData[]>('/api/github/requested_reviewers', fetcher);

    let payload = <Loading/>;
    if (data) {
        let prByReviewer = new Map<string, string[]>();
        for (const entry of data) {
            let prs = prByReviewer.get(entry.reviewer);
            if (!prs) {
                prs = [];
                prByReviewer.set(entry.reviewer, prs);
            }
            prs.push(entry.pr);
        }
        let chartData = [];
        for (const [reviewer, prs] of prByReviewer) {
            chartData.push([reviewer, prs.length]);
        }
        let options = {
            dataset: [
                {
                    dimensions: ['reviewer', 'count'],
                    source: chartData
                },
                {
                    transform: {
                        type: 'sort',
                        config: { dimension: 'count', order: 'desc' }
                    }
                }
            ],
            xAxis: {
                name: 'reviewer',
                type: 'category',
                axisLabel: { interval: 0, rotate: 30 }
            },
            yAxis: {
                name: 'count',
            },
            series: {
                type: 'bar',
                encode: { x: 'reviewer', y: 'count' },
                datasetIndex: 1,
                label: {
                    normal: {
                        show: true,
                        position: 'top'
                    }
                }
            }
        };
        payload = <EChartsReact
            option={options}
            className="w-full mt-10"
            onEvents={{
                'click': function (params: any) {
                    const data = params.data;
                    const prs = prByReviewer.get(data[0]);
                    console.log(prs);
                }
            }}
        />
    }

    return (
        <div className="flex flex-col items-center justify-center min-h-screen py-2">
            <Head>
                <title>Neptune Dashboard</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className="flex flex-col items-center justify-center w-full flex-1 px-20 text-center">
                <h1 className="text-6xl font-bold">
                    GitHub Requested Reviewers
                </h1>

                {payload}
            </main>

            <Footer/>
        </div>
    )
}
